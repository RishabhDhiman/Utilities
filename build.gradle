apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))


def static getApkNamePrefix() {
    return new Date().format('dd-MM__@__HH-mm')
}
def getVersionCode(def fileName) {
    Properties versionProps = new Properties()
    def versionPropsFile = file(fileName)
    if (versionPropsFile.exists())
        versionProps.load(new FileInputStream(versionPropsFile))
    def code = (versionProps['VERSION_CODE'] ?: "0").toInteger() + 1
    versionProps['VERSION_CODE'] = code.toString()
    versionProps.store(versionPropsFile.newWriter(), null)
    return code
}

android {
    compileSdkVersion 26
//    buildToolsVersion "26.0.1"
    useLibrary 'org.apache.http.legacy'
    packagingOptions {
        pickFirst 'META-INF/LICENSE'
    }
    defaultConfig {
        applicationId "com.sumeru.ensource_ummeed"
        minSdkVersion 19
        targetSdkVersion 21
        versionCode 1
        versionName "ENSource-Ummeed-1.0.0V"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled = true
    }
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }

    }

    /*lintOptions{
        disable "ResourceType"
    }*/

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        DEV_BUILD_UAT {
            buildConfigField "String", 'BASE_URL', "\"http://202.143.98.130:8060\""
            buildConfigField "String", 'TOKEN', "\"http://202.143.98.130:8061/connect/token\""
            buildConfigField "String", 'INSTANCE', "\"UAT\""
            buildConfigField "boolean", 'FOR_CLIENT', "false"
            def code =getVersionCode("dev_uat_version.txt")
            buildConfigField "String", 'VERSION_NUMBER', "\"$code\""
            setProperty("archivesBaseName", getApkNamePrefix())
            signingConfig signingConfigs.debug
        }
        DEV_BUILD_QA {
            buildConfigField "String", 'BASE_URL', "\"http://13.126.19.36:8010/ENTigerUmmeedTwo\""
            buildConfigField "String", 'TOKEN', "\"http://13.126.19.36:8012/flexauthummeedtwo/connect/token\""
            buildConfigField "String", 'INSTANCE', "\"QA\""
            buildConfigField "boolean", 'FOR_CLIENT', "false"
            setProperty("archivesBaseName", getApkNamePrefix())
            def code =getVersionCode("dev_qa_version.txt")
            buildConfigField "String", 'VERSION_NUMBER', "\"$code\""
            signingConfig signingConfigs.debug
        }

        CLIENT_BUILD_UAT {
            buildConfigField "String", 'BASE_URL', "\"http://202.143.98.130:8060\""
            buildConfigField "String", 'TOKEN', "\"http://202.143.98.130:8061/connect/token\""
            buildConfigField "String", 'INSTANCE', "\"UAT\""
            buildConfigField "boolean", 'FOR_CLIENT', "true"
            setProperty("archivesBaseName", getApkNamePrefix())
            def code =getVersionCode("client_uat_version.txt")
            buildConfigField "String", 'VERSION_NUMBER', "\"$code\""
            signingConfig signingConfigs.debug
        }
        CLIENT_BUILD_QA {
            buildConfigField "String", 'BASE_URL', "\"http://13.126.19.36:8010/ENTigerUmmeedTwo\""
            buildConfigField "String", 'TOKEN', "\"http://13.126.19.36:8012/flexauthummeedtwo/connect/token\""
            buildConfigField "String", 'INSTANCE', "\"QA\""
            buildConfigField "boolean", 'FOR_CLIENT', "true"
            def code =getVersionCode("client_qa_version.txt")
            buildConfigField "String", 'VERSION_NUMBER', "\"$code\""
            setProperty("archivesBaseName", getApkNamePrefix())
            signingConfig signingConfigs.debug
        }
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }
    buildToolsVersion = '29.0.2'
}
/* buildTypes {
     release {
         minifyEnabled false
         proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
         //versionNameSuffix 'ENSource-Paras-1.1.6V'
         signingConfig signingConfigs.release

        }
    }*/

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //testCompile 'junit:junit:4.12'
    implementation('org.apache.httpcomponents:httpmime:4.3.3') {
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }
    //implementation 'com.android.support:appcompat-v7:24.2.0'
    implementation project(':btprinter-1.0')
    //implementation 'joda-time:joda-time:2.8.1'
    //    implementation 'org.achartengine:achartengine:1.1.0'
    implementation project(':crop-aar_1.0')
    // Supports Android 4.0.3 and later (API level 15)
    // Supports Android 2.1 and later (API level 7), but not optimal for later Android versions.
    // If you only plan on supporting Android 4.0.3 and up, you don't need to include this.
    // Convenience library to launch the scanning and encoding Activities.
    // It automatically picks the best scanning library from the above two, depending on the
    // Android version and what is available.
    // Version 3.0.x of zxing core contains some code that is not compatible on Android 2.2 and earlier.
    // This mostly affects encoding, but you should test if you plan to support these versions.
    // Older versions e.g. 2.2 may also work if you need support for older Android versions.
    //    implementation files('libs/achartengine-1.2.0.jar')
    // implementation 'com.google.android.gms:play-services-appindexing:11.2.0'
    //Picasso
    implementation 'com.google.code.gson:gson:2.2.4'
    implementation 'com.nineoldandroids:library:2.4.0'
    implementation 'org.apache.httpcomponents:httpclient-android:4.3.5.1'
    implementation 'com.android.support:support-annotations:19.0.0'
    implementation 'com.google.maps:google-maps-services:0.1.16'
    implementation 'com.google.maps.android:android-maps-utils:0.4.+'
    implementation 'com.androidmapsextensions:android-maps-extensions:2.2.0'
    implementation 'com.journeyapps:zxing-android-embedded:2.0.1@aar'
    implementation 'com.journeyapps:zxing-android-legacy:2.0.1@aar'
    implementation 'com.journeyapps:zxing-android-integration:2.0.1@aar'
    implementation 'com.google.zxing:core:3.0.1'
    implementation 'com.github.satyan:sugar:1.5'
    implementation 'com.google.firebase:firebase-core:11.2.0'
    implementation 'com.google.android.gms:play-services-gcm:11.2.0'
    implementation 'com.google.android.gms:play-services-maps:11.2.0'
    implementation 'com.google.firebase:firebase-appindexing:11.2.0'
    implementation 'com.google.android.gms:play-services-location:11.2.0'
    implementation 'com.google.firebase:firebase-messaging:11.2.0'
    implementation 'com.amitshekhar.android:android-networking:1.0.2'
    implementation 'com.android.support:recyclerview-v7:26.0.0-alpha1'
    implementation 'com.android.support:cardview-v7:26.1.0'
    implementation 'com.squareup.picasso:picasso:2.5.2'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.budiyev.android:code-scanner:2.1.0'
    implementation 'com.intuit.sdp:sdp-android:1.0.6'
    /*
    implementation 'com.toptoche.searchablespinner:searchablespinnerlibrary:1.3.1'*/
}
